import { useRouter } from 'next/router';
import { useEffect, useRef, useState } from 'react';
import { Heading } from '@chakra-ui/react';
import { gql, useMutation } from '@apollo/client';

import Head from 'next/head';
import styles from '../../styles/Home.module.css';

const JOIN_QUEUE = gql`
  mutation CreateNewUser($queue_id: String, $user_id: uuid) {
    insert_queue_user_intersection(objects: {
      queue_id: $queue_id,
      user_id: $user_id,
      in_queue: true,
    }) {
      returning {
        id
        timestamp
      }
    }
  }
`;

export default function JoinByLink() {

  const router = useRouter();
  const [stringQueueId, setStringQueueId] = useState(null); // stringQueueId is the string extracted from stringQueueId

  const userId = useRef('');
  const POSITION_HREF = '/position/';

  useEffect(() => {
    // test if Next router values are ready, and check that stringQueueId is not null
    if (router.isReady && (stringQueueId === null)) {
      // extract the slug from the url path
      const tempQueueId = router.query.queueId;

      if (typeof tempQueueId === 'string') {
        setStringQueueId(tempQueueId);
      }
      else if (Array.isArray(tempQueueId)) {
        // set stringQueueId to index 0 because the stringQueueId is the first entry in the slug per requirements
        setStringQueueId(tempQueueId[0]);
      }
      else {
        alert('NextJS url slug issue encountered :(')
      }
    }
  }, [router, stringQueueId])

  useEffect(() => {
    userId.current = localStorage.getItem('QueuedUpUserId');
  }, []);

  const [joinQueue, { data, loading, error }] = useMutation(JOIN_QUEUE);

  const onMutationError = (error: ApolloError) => {
    // if the error is a constraint-violation, it is likely because the user is already in the queue.
    if (error.graphQLErrors[0].extensions.code === 'constraint-violation') {
      // put them through to the position page!
      router.push(POSITION_HREF + stringQueueId);
    }
    // otherwise, I don't know what the error is :(
    else {
      alert('Unknown GraphQL Error encountered.');
    }
  };

  useEffect(() => {
    // ensure string is correct length
    if (stringQueueId) {
      // mutate the database to add user/queue intersection
      joinQueue({
        variables: {
          'queue_id': stringQueueId,
          'user_id': localStorage.getItem('QueuedUpUserId'),
        },
        onError: onMutationError,
      });
      // navigate to the 'position' page after joining the queue
      router.push(POSITION_HREF + stringQueueId);
    };
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Joining Queue...</title>
        <meta name="Webservice for virtual queues" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Heading>Loading...</Heading>
    </div>
  );
};
